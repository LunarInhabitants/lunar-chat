// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_CONNECTION_STRING")
  relationMode = "prisma"
}

//===================================================================================================
//= LunarChat auth models
//===================================================================================================

// This is a login account tied to a particular external auth service like GitHub. One user can potentially have many accounts tied to them.
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// A user's session.
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// A descrete user.
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  realms                 Realm[]
  userRealmSubscriptions UserRealmSubscription[]
  channelMessages        ChannelMessage[]
}

// Used by passwordless sign ins like emails or 2FA.
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//===================================================================================================
//= LunarChat core models
//===================================================================================================

// A realm maps to a Discord server/guild. Users and channels both belong to a realm.
model Realm {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String
  name        String
  description String   @db.Text
  isPublic    Boolean  @default(false)

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  channelGroups          RealmChannelGroup[]
  userRealmSubscriptions UserRealmSubscription[]

  @@index([ownerId])
}

// A group within a realm that one or more users can belong to. This determines permissions, among other things.
model RealmUserGroup {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String   @db.Text

  userRealmSubscriptions UserRealmSubscription[]
}

model UserRealmSubscription {
  realmId String
  userId  String
  groupId String?

  realm Realm           @relation(fields: [realmId], references: [id], onDelete: Cascade)
  user  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  group RealmUserGroup? @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([realmId, userId])
  @@index([realmId])
  @@index([userId])
  @@index([groupId])
}

model RealmChannelGroup {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  realmId      String
  displayOrder Int      @default(0)
  name         String
  description  String   @db.Text

  realm Realm @relation(fields: [realmId], references: [id], onDelete: Cascade)

  channels RealmChannel[]

  @@index([realmId])
}

model RealmChannel {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  channelGroupId String
  displayOrder   Int      @default(0)
  name           String
  description    String   @db.Text

  channelGroup RealmChannelGroup @relation(fields: [channelGroupId], references: [id], onDelete: Cascade)

  channelMessages ChannelMessage[]

  @@index([channelGroupId])
}

model ChannelMessage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ownerId   String
  channelId String
  message   String   @db.Text
  extraData Json?

  owner   User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  channel RealmChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([ownerId])
  @@index([channelId])
}
